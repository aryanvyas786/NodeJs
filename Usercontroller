import { Request, Response } from 'express';
import User from '../models/User';
import Address from '../models/Address';

export const getUsers = async (req: Request, res: Response) => {
  try {
    const users = await User.findAll({ include: Address });
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const getUserById = async (req: Request, res: Response) => {
  try {
    const user = await User.findByPk(req.params.id, { include: Address });
    if (!user) return res.status(404).json({ message: 'User not found' });
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const updateUser = async (req: Request, res: Response) => {
  const userId = req.params.id;
  try {
    const user = await User.findByPk(userId);
    if (!user) return res.status(404).json({ message: 'User not found' });

    // Update user data
    const updatedUserData = {
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      email: req.body.email,
      profilePhoto: req.file ? req.file.path : user.profilePhoto,
      appointmentLetter: req.body.appointmentLetter,
    };
    await User.update(updatedUserData, { where: { id: userId } });

    // Update address data
    const addressData = {
      companyAddress: req.body.companyAddress,
      companyCity: req.body.companyCity,
      companyState: req.body.companyState,
      companyZip: req.body.companyZip,
      homeAddress: req.body.homeAddress,
      homeCity: req.body.homeCity,
      homeState: req.body.homeState,
      homeZip: req.body.homeZip,
    };
    await Address.update(addressData, { where: { userId } });

    res.status(200).json({ message: 'User updated successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const deleteUser = async (req: Request, res: Response) => {
  const userId = req.params.id;
  try {
    const user = await User.findByPk(userId);
    if (!user) return res.status(404).json({ message: 'User not found' });

    // Delete associated address
    await Address.destroy({ where: { userId } });

    // Delete user
    await User.destroy({ where: { id: userId } });

    res.status(204).send(); // No content response
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
